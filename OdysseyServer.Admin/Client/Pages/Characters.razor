@page "/characters"
@inject HttpClient Http

<h1>Characters</h1>

@if (mode == 0)
{
    <button class="btn btn-primary" @onclick="AddCharacter">Add character</button>
    <table class="table table-striped">
        <thead>
            <tr>
                <td>Name</td>
                <td>Power</td>
                <td>XP</td>
                <td>Level</td>
                <td>Gear tier</td>
                <td></td>
            </tr>
        </thead>
        <tbody>
            @foreach (var row in characters)
            {
                <tr>
                    <td>@row.Name</td>
                    <td>@row.Power</td>
                    <td>@row.Xp</td>
                    <td>@row.Level</td>
                    <td>@row.GearTier</td>
                    <td>
                        <button class="btn btn-outline-info" @onclick="() => EditCharacter(row)">Edit</button>
                        <button class="btn btn-warning" @onclick="() => RemoveCharacter(row)">Remove</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else if (mode == 1 || mode == 3)
{
    <EditForm Model="@current" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <p class="form-group">
            <label>
                Character name:
                <InputText class="form-control" @bind-Value="current.Name" />
            </label>
        </p>
        <p class="form-group">
            <label>
                Power:
                <InputNumber min="0" class="form-control" @bind-Value="current.Power" />
            </label>
        </p>
        <p class="form-group">
            <label>
                XP:
                <InputNumber min="0" class="form-control" @bind-Value="current.Xp" />
            </label>
        </p>
        <p class="form-group">
            <label>
                Level:
                <InputNumber min="0" class="form-control" @bind-Value="current.Level" />
            </label>
        </p>
        <p class="form-group">
            <label>
                Gear tier:
                <InputNumber min="0" class="form-control" @bind-Value="current.GearTier" />
            </label>
        </p>
        <button class="btn btn-primary" type="submit">Save</button>

    </EditForm>
} else if(mode == 2)
{
    <h3>Working with server...</h3>
}

@code {
    private List<Character> characters;
    private Character current;
    private byte mode = 0;

    private async void HandleValidSubmit()
    {
        if (mode == 1)
        {
            mode = 2;
            await Http.PostProtobufAsync("character", new CharacterCreateRequest { Character = current });
        } else if(mode == 3)
        {
            mode = 2;
            await Http.PutProtobufAsync("character", new CharacterUpdateRequest { Character = current });
        }
        await ReloadTable();
        mode = 0;
        StateHasChanged();
    }

    private void AddCharacter()
    {
        current = new Character() { Name = "new" };
        mode = 1;
    }

    private async void RemoveCharacter(Character row)
    {
        mode = 2;
        await Http.DeleteProtobufAsync($"character/{row.Id}");
        await ReloadTable();
        mode = 0;
        StateHasChanged();
    }

    private void EditCharacter(Character row)
    {
        current = row;
        mode = 3;
    }

    private async Task ReloadTable()
    {
        var response = await Http.GetFromProtobufAsync<CharacterAllResponse>(CharacterAllResponse.Parser, "characters");
        characters = response.Character.Characters.ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        characters = new List<Character>();
        mode = 2;
        await ReloadTable();
        mode = 0;
    }
}
